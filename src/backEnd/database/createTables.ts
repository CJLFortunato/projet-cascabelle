/* eslint-disable no-console */
import { VercelPoolClient, db } from '@vercel/postgres';

async function createTypeTable(client: VercelPoolClient) {
  try {
    const createTable = await client.sql`
      CREATE TABLE IF NOT EXISTS type (
        pk_id_type INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        label VARCHAR(50) NOT NULL
      );
    `;

    return {
      createTable,
    };
  } catch (error) {
    console.error('Error creating types:', error);
    throw error;
  }
}

async function createSupportTable(client: VercelPoolClient) {
  try {
    const createTable = await client.sql`
      CREATE TABLE IF NOT EXISTS support (
        pk_id_support INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        label VARCHAR(50) NOT NULL
      );
    `;

    return {
      createTable,
    };
  } catch (error) {
    console.error('Error creating support:', error);
    throw error;
  }
}

async function createGenreTable(client: VercelPoolClient) {
  try {
    const createTable = await client.sql`
      CREATE TABLE IF NOT EXISTS genre (
        pk_id_genre INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        label VARCHAR(50) NOT NULL
      );
    `;

    return {
      createTable,
    };
  } catch (error) {
    console.error('Error creating genres:', error);
    throw error;
  }
}

async function createRoleTable(client: VercelPoolClient) {
  try {
    const createTable = await client.sql`
      CREATE TABLE IF NOT EXISTS role (
        pk_id_role INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        label VARCHAR(50) NOT NULL
      );
    `;

    return {
      createTable,
    };
  } catch (error) {
    console.error('Error creating roles:', error);
    throw error;
  }
}

async function createSubscriptionTable(client: VercelPoolClient) {
  try {
    const createTable = await client.sql`
      CREATE TABLE IF NOT EXISTS subscription (
        pk_id_subscription INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        name VARCHAR(50) NOT NULL,
        monthly_price FLOAT NOT NULL,
        annual_price FLOAT NOT NULL
      );
    `;

    return {
      createTable,
    };
  } catch (error) {
    console.error('Error creating subscriptions:', error);
    throw error;
  }
}

async function createLibraryTable(client: VercelPoolClient) {
  try {
    const createTable = await client.sql`
      CREATE TABLE IF NOT EXISTS library (
        pk_id_library INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        name VARCHAR(100) NOT NULL,
        address VARCHAR(200) NOT NULL,
        open_hours VARCHAR(150) NOT NULL,
        postal_code VARCHAR(10) NOT NULL,
        city VARCHAR(50) NOT NULL
      );
    `;

    return {
      createTable,
    };
  } catch (error) {
    console.error('Error creating libraries:', error);
    throw error;
  }
}

async function createEventTypeTable(client: VercelPoolClient) {
  try {
    const createTable = await client.sql`
      CREATE TABLE IF NOT EXISTS event_type (
        pk_id_event_type INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        label VARCHAR(50) NOT NULL
      );
    `;

    return {
      createTable,
    };
  } catch (error) {
    console.error('Error creating event_types:', error);
    throw error;
  }
}

async function createEventTable(client: VercelPoolClient) {
  try {
    const createTable = await client.sql`
      CREATE TABLE IF NOT EXISTS event (
        pk_id_event INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        name VARCHAR(100) NOT NULL,
        summary TEXT NOT NULL,
        fk_id_event_type INT NOT NULL,
        CONSTRAINT event_event_type_fk_id_event_type_fkey
          FOREIGN KEY(fk_id_event_type)
          REFERENCES event_type(pk_id_event_type)
      );
    `;

    return {
      createTable,
    };
  } catch (error) {
    console.error('Error creating libraries:', error);
    throw error;
  }
}

async function createUserTable(client: VercelPoolClient) {
  try {
    const createTable = await client.sql`
      CREATE TABLE IF NOT EXISTS "user" (
        pk_id_user INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        first_name VARCHAR(50) NOT NULL,
        last_name VARCHAR(50) NOT NULL,
        birth_date DATE NOT NULL,
        street_address VARCHAR(200) NOT NULL,
        postal_code VARCHAR(10) NOT NULL,
        city VARCHAR(50) NOT NULL,
        card_number VARCHAR(20),
        fk_id_subscription INT NOT NULL,
        fk_id_role INT NOT NULL,
        UNIQUE(card_number),
        CONSTRAINT user_subscription_fk_id_subscription_fkey
          FOREIGN KEY(fk_id_subscription)
          REFERENCES subscription(pk_id_subscription),
        CONSTRAINT user_role_fk_id_role_fkey
          FOREIGN KEY(fk_id_role)
          REFERENCES role(pk_id_role)
      );
    `;

    return {
      createTable,
    };
  } catch (error) {
    console.error('Error creating users:', error);
    throw error;
  }
}

async function createDocumentsTable(client: VercelPoolClient) {
  try {
    const createTable = await client.sql`
      CREATE TABLE IF NOT EXISTS document (
        pk_id_document INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        title VARCHAR(100) NOT NULL,
        author VARCHAR(75) NOT NULL,
        performer VARCHAR(75),
        actors VARCHAR(200),
        director VARCHAR(75),
        publisher VARCHAR(75) NOT NULL,
        publication VARCHAR(75),
        publishing_date DATE NOT NULL,
        insertion_date TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
        isxn VARCHAR(20),
        blurb TEXT,
        cover VARCHAR(255),
        country VARCHAR(50),
        notes TEXT,
        rating VARCHAR(50) NOT NULL,
        subtitles BOOLEAN,
        audiodescription BOOLEAN,
        fk_id_support INT NOT NULL,
        fk_id_type INT NOT NULL,
        CONSTRAINT document_support_fk_id_support_fkey
          FOREIGN KEY(fk_id_support)
          REFERENCES support(pk_id_support),
        CONSTRAINT document_type_fk_id_type_fkey
          FOREIGN KEY(fk_id_type)
          REFERENCES type(pk_id_type)
      );
    `;

    return {
      createTable,
    };
  } catch (error) {
    console.error('Error creating documents:', error);
    throw error;
  }
}

async function createReviewTable(client: VercelPoolClient) {
  try {
    const createTable = await client.sql`
      CREATE TABLE IF NOT EXISTS review (
        pk_id_review INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        name VARCHAR(100) NOT NULL,
        grade INT NOT NULL,
        insertion_date TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
        approved BOOLEAN NOT NULL,
        comment TEXT,
        fk_id_document INT NOT NULL,
        fk_id_user INT NOT NULL,
        CONSTRAINT review_document_fk_id_document_fkey
          FOREIGN KEY(fk_id_document)
          REFERENCES document(pk_id_document),
        CONSTRAINT review_user_fk_id_user_fkey
          FOREIGN KEY(fk_id_user)
          REFERENCES "user"(pk_id_user)
      );
    `;

    return {
      createTable,
    };
  } catch (error) {
    console.error('Error creating reviews:', error);
    throw error;
  }
}

async function createDocumentLibraryTable(client: VercelPoolClient) {
  try {
    const createTable = await client.sql`
      CREATE TABLE IF NOT EXISTS document_library (
        fk_id_document INT,
        fk_id_library INT,
        stock INT NOT NULL,
        PRIMARY KEY(fk_id_document, fk_id_library),
        CONSTRAINT document_library_fk_id_document_fkey
          FOREIGN KEY(fk_id_document)
          REFERENCES document(pk_id_document),
        CONSTRAINT document_library_fk_id_library_fkey
          FOREIGN KEY(fk_id_library)
          REFERENCES library(pk_id_library)
      );
    `;

    return {
      createTable,
    };
  } catch (error) {
    console.error('Error creating document_library:', error);
    throw error;
  }
}

async function createEventLibraryTable(client: VercelPoolClient) {
  try {
    const createTable = await client.sql`
      CREATE TABLE IF NOT EXISTS event_library (
        fk_id_event INT,
        fk_id_library INT,
        date_begin TIMESTAMP WITH TIME ZONE NOT NULL,
        date_end TIMESTAMP WITH TIME ZONE NOT NULL,
        PRIMARY KEY(fk_id_event, fk_id_library),
        CONSTRAINT event_library_fk_id_event_fkey
          FOREIGN KEY(fk_id_event)
          REFERENCES event(pk_id_event),
        CONSTRAINT event_library_fk_id_library_fkey
          FOREIGN KEY(fk_id_library)
          REFERENCES library(pk_id_library)
      );
    `;

    return {
      createTable,
    };
  } catch (error) {
    console.error('Error creating event_library:', error);
    throw error;
  }
}

async function createDocumentGenreTable(client: VercelPoolClient) {
  try {
    const createTable = await client.sql`
      CREATE TABLE IF NOT EXISTS document_genre (
        fk_id_document INT,
        fk_id_genre INT,
        PRIMARY KEY(fk_id_document, fk_id_genre),
        CONSTRAINT document_genre_fk_id_document_fkey
          FOREIGN KEY(fk_id_document)
          REFERENCES document(pk_id_document),
        CONSTRAINT document_genre_fk_id_genre_fkey
          FOREIGN KEY(fk_id_genre)
          REFERENCES genre(pk_id_genre)
      );
    `;

    return {
      createTable,
    };
  } catch (error) {
    console.error('Error creating document_genre:', error);
    throw error;
  }
}

async function createDocumentUserTable(client: VercelPoolClient) {
  try {
    const createTable = await client.sql`
      CREATE TABLE IF NOT EXISTS document_user (
        fk_id_document INT,
        fk_id_user INT,
        date_borrow TIMESTAMP WITH TIME ZONE NOT NULL,
        date_return TIMESTAMP WITH TIME ZONE NOT NULL,
        PRIMARY KEY(fk_id_document, fk_id_user),
        CONSTRAINT document_user_fk_id_document_fkey
          FOREIGN KEY(fk_id_document)
          REFERENCES document(pk_id_document),
        CONSTRAINT document_user_fk_id_user_fkey
          FOREIGN KEY(fk_id_user)
          REFERENCES "user"(pk_id_user)
      );
    `;

    return {
      createTable,
    };
  } catch (error) {
    console.error('Error creating document_user:', error);
    throw error;
  }
}

async function main() {
  try {
    const client = await db.connect();

    await createTypeTable(client);
    await createSupportTable(client);
    await createGenreTable(client);
    await createRoleTable(client);
    await createSubscriptionTable(client);
    await createLibraryTable(client);
    await createEventTypeTable(client);
    await createEventTable(client);
    await createUserTable(client);
    await createDocumentsTable(client);
    await createReviewTable(client);
    await createDocumentLibraryTable(client);
    await createEventLibraryTable(client);
    await createDocumentGenreTable(client);
    await createDocumentUserTable(client);
  } catch (error) {
    console.error(
      'An error occurred while attempting to seed the database:',
      error,
    );
  }
}

export default main;
